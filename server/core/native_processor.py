"""
Processeur natif pour traiter les lots directement sur le serveur - VERSION CORRIG√âE
"""

import os
import subprocess
import asyncio
import shutil
from pathlib import Path
from typing import List, Optional
import time

from models.batch import Batch, BatchStatus
from config.settings import config
from utils.logger import get_logger

class NativeProcessor:
    """Processeur natif du serveur pour traiter les lots localement"""
    
    def __init__(self, server):
        self.server = server
        self.logger = get_logger(__name__)
        self.is_processing = False
        self.current_batch = None
        self.realesrgan_path = None
        
        # V√©rifier la disponibilit√© de Real-ESRGAN
        self.realesrgan_available = self._check_realesrgan_availability()
    
    def _check_realesrgan_availability(self) -> bool:
        """V√©rifie si Real-ESRGAN est disponible"""
        try:
            # Chemin vers Real-ESRGAN int√©gr√©
            project_root = Path(__file__).parent.parent
            realesrgan_path = project_root / "realesrgan-ncnn-vulkan" / "Windows" / "realesrgan-ncnn-vulkan.exe"
            
            self.logger.info(f"V√©rification de Real-ESRGAN dans: {realesrgan_path}")
            
            if realesrgan_path.exists():
                self.realesrgan_path = str(realesrgan_path)
                self.logger.info(f"‚úÖ Real-ESRGAN trouv√©: {realesrgan_path}")
                return True
            else:
                # Essayer dans le dossier du projet actuel
                current_realesrgan = Path.cwd() / "realesrgan-ncnn-vulkan.exe"
                if current_realesrgan.exists():
                    self.realesrgan_path = str(current_realesrgan)
                    self.logger.info(f"‚úÖ Real-ESRGAN trouv√©: {current_realesrgan}")
                    return True
                else:
                    self.logger.warning(f"‚ùå Real-ESRGAN non trouv√© dans: {realesrgan_path} ou {current_realesrgan}")
                    return False
            
        except Exception as e:
            self.logger.warning(f"Erreur v√©rification Real-ESRGAN: {e}")
            return False
    
    async def start_native_processing(self):
        """D√©marre le traitement natif des lots"""
        if not self.realesrgan_available:
            self.logger.warning("Traitement natif impossible - Real-ESRGAN non disponible")
            return
        
        if self.is_processing:
            return
        
        self.is_processing = True
        self.logger.info("Traitement natif d√©marr√©")
        
        # Boucle de traitement
        while self.is_processing and self.server.running:
            try:
                # Chercher un lot en attente
                pending_batch = self._get_next_pending_batch()
                
                if pending_batch:
                    await self._process_batch_native(pending_batch)
                else:
                    # Aucun lot en attente, attendre un peu
                    await asyncio.sleep(2)
                    
            except Exception as e:
                self.logger.error(f"Erreur dans la boucle de traitement natif: {e}")
                await asyncio.sleep(5)
        
        self.is_processing = False
        self.logger.info("Traitement natif arr√™t√©")
    
    def stop_native_processing(self):
        """Arr√™te le traitement natif"""
        self.is_processing = False
        if self.current_batch:
            # Remettre le lot en attente
            batch = self.server.batches.get(self.current_batch)
            if batch and batch.status == BatchStatus.PROCESSING:
                batch.reset()
                self.logger.info(f"Lot {self.current_batch} remis en attente")
        self.current_batch = None
    
    def _get_next_pending_batch(self) -> Optional[Batch]:
        """R√©cup√®re le prochain lot en attente"""
        # Chercher les lots en attente, tri√©s par anciennet√©
        pending_batches = [
            batch for batch in self.server.batches.values()
            if batch.status == BatchStatus.PENDING
        ]
        
        if not pending_batches:
            return None
        
        # Trier par date de cr√©ation (plus ancien en premier)
        pending_batches.sort(key=lambda b: b.created_at)
        return pending_batches[0]
    
    async def _process_batch_native(self, batch: Batch):
        """Traite un lot nativement"""
        try:
            self.current_batch = batch.id
            batch.assign_to_client("SERVER_NATIVE")
            batch.start_processing()
            
            self.logger.info(f"Traitement natif du lot {batch.id} - {len(batch.frame_paths)} frames")
            
            # Pr√©parer les dossiers
            input_dir = Path(config.TEMP_DIR) / f"job_{batch.job_id}_frames"
            output_dir = Path(config.TEMP_DIR) / f"job_{batch.job_id}_upscaled"
            
            if not input_dir.exists():
                raise Exception(f"Dossier d'entr√©e non trouv√©: {input_dir}")
            
            output_dir.mkdir(exist_ok=True)
            
            # Traiter les frames avec Real-ESRGAN
            success = await self._run_realesrgan(input_dir, output_dir, batch)
            
            if success:
                batch.complete()
                self.logger.info(f"Lot {batch.id} trait√© avec succ√®s en natif")
                
                # Mettre √† jour la progression du job
                await self.server._update_job_progress(batch.job_id)
            else:
                batch.fail("Erreur lors du traitement Real-ESRGAN")
                self.logger.error(f"√âchec du traitement natif du lot {batch.id}")
            
            self.current_batch = None
            
        except Exception as e:
            batch.fail(str(e))
            self.current_batch = None
            self.logger.error(f"Erreur traitement natif lot {batch.id}: {e}")
    
    async def _run_realesrgan(self, input_dir: Path, output_dir: Path, batch: Batch) -> bool:
        """Ex√©cute Real-ESRGAN avec configuration forc√©e RTX 3050"""
        try:
            # Configuration forc√©e pour RTX 3050
            from config.settings import FORCE_RTX_3050, RTX_3050_OVERRIDE
            
            if FORCE_RTX_3050:
                print("üéØ FORCE RTX 3050 MODE ACTIV√â")
                
                # Configuration optimis√©e sp√©cifiquement pour RTX 3050
                rtx_config = {
                    'gpu_id': 0,  # FORCER GPU 0 (RTX 3050)
                    'model': 'realesr-animevideov3',
                    'tile_size': 256,
                    'threads': '3:6:3',  # Configuration agressive
                    'use_fp16': True
                }
                
                print(f"üöÄ Configuration RTX 3050 forc√©e: {rtx_config}")
            else:
                # Utilisation de la configuration optimis√©e du syst√®me
                from core.optimized_real_esrgan import optimized_realesrgan
                rtx_config = optimized_realesrgan.optimal_config
                
                # Correction si le mauvais GPU est s√©lectionn√©
                if rtx_config.get('gpu_id', -1) != 0:
                    print(f"‚ö†Ô∏è GPU incorrect d√©tect√© ({rtx_config.get('gpu_id')}), correction vers GPU 0 (RTX 3050)")
                    rtx_config['gpu_id'] = 0
                    rtx_config['threads'] = '3:6:3'  # Configuration plus agressive
            
            print(f"üéØ Configuration finale pour lot {batch.id}: {rtx_config}")
            
            # Construction de la commande Real-ESRGAN
            cmd = [self.realesrgan_path]
            
            # Param√®tres de base
            cmd.extend(["-i", str(input_dir)])
            cmd.extend(["-o", str(output_dir)])
            cmd.extend(["-n", rtx_config.get('model', 'realesr-animevideov3')])
            cmd.extend(["-f", "png"])
            
            # Configuration GPU - FORCER RTX 3050
            gpu_id = rtx_config.get('gpu_id', 0)
            cmd.extend(["-g", str(gpu_id)])
            print(f"üéØ FORC√â: Utilisation GPU {gpu_id} (RTX 3050)")
            
            # Tile size optimis√©
            tile_size = rtx_config.get('tile_size', 256)
            cmd.extend(["-t", str(tile_size)])
            print(f"üî≤ Tile size: {tile_size}")
            
            # Threads optimis√©s pour performance maximale
            threads = rtx_config.get('threads', '3:6:3')
            cmd.extend(["-j", threads])
            print(f"üßµ Threads agressifs: {threads}")
            
            # Mode verbose
            cmd.append("-v")
            
            self.logger.info(f"Ex√©cution Real-ESRGAN RTX 3050 FORC√â: {' '.join(cmd)}")
            print(f"üöÄ Commande RTX 3050: {' '.join(cmd)}")
            
            # Ex√©cuter le processus
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            # Attendre la fin du processus
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # V√©rifier que les frames ont √©t√© cr√©√©es
                expected_frames = len(batch.frame_paths)
                output_frames = len(list(output_dir.glob("*.png")))
                
                if output_frames >= expected_frames * 0.9:  # Tol√©rance de 10%
                    self.logger.info(f"RTX 3050 Real-ESRGAN r√©ussi: {output_frames}/{expected_frames} frames")
                    print(f"‚úÖ RTX 3050 Real-ESRGAN r√©ussi: {output_frames}/{expected_frames} frames")
                    return True
                else:
                    self.logger.error(f"Frames manquantes: {output_frames}/{expected_frames}")
                    print(f"‚ùå Frames manquantes: {output_frames}/{expected_frames}")
                    return False
            else:
                error_msg = stderr.decode() if stderr else "Erreur inconnue"
                self.logger.error(f"RTX 3050 Real-ESRGAN √©chou√© (code {process.returncode}): {error_msg}")
                print(f"‚ùå RTX 3050 Real-ESRGAN √©chou√©: {error_msg}")
                
                # Si √©chec avec RTX, essayer avec configuration de secours
                print("üîÑ Tentative avec configuration de secours...")
                return await self._run_realesrgan_fallback(input_dir, output_dir, batch)
                
        except Exception as e:
            self.logger.error(f"Erreur ex√©cution RTX 3050 Real-ESRGAN: {e}")
            print(f"‚ùå Erreur ex√©cution RTX 3050: {e}")
            return False
    
    async def _run_realesrgan_fallback(self, input_dir: Path, output_dir: Path, batch: Batch) -> bool:
        """Configuration de secours si RTX 3050 √©choue"""
        try:
            print("üîÑ Mode de secours: configuration conservative")
            
            cmd = [
                self.realesrgan_path,
                "-i", str(input_dir),
                "-o", str(output_dir),
                "-n", "realesr-animevideov3",
                "-f", "png",
                "-g", "0",  # Essayer GPU 0 avec config conservative
                "-t", "128",  # Tile size r√©duit
                "-j", "1:2:1",  # Threads r√©duits
                "-v"
            ]
            
            print(f"üîÑ Commande de secours: {' '.join(cmd)}")
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                expected_frames = len(batch.frame_paths)
                output_frames = len(list(output_dir.glob("*.png")))
                
                if output_frames >= expected_frames * 0.8:  # Tol√©rance de 20% en mode secours
                    print(f"‚úÖ Mode secours r√©ussi: {output_frames}/{expected_frames} frames")
                    return True
                    
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur mode secours: {e}")
            return False

    def get_status(self) -> dict:
        """Retourne le statut du processeur natif"""
        return {
            "available": self.realesrgan_available,
            "processing": self.is_processing,
            "current_batch": self.current_batch,
            "model": config.REALESRGAN_MODEL,
            "tile_size": config.TILE_SIZE,
            "gpu_id": config.GPU_ID,
            "executable_path": self.realesrgan_path
        }