# server/utils/config.py
"""
Configuration pour le serveur
"""
import os
import json
from pathlib import Path
from typing import Dict, Any, Optional

class ServerConfig:
    """Gestionnaire de configuration pour le serveur"""
    
    def __init__(self):
        self.config_dir = Path.home() / ".distributed_upscaler_server"
        self.config_file = self.config_dir / "config.json"
        self.config_dir.mkdir(exist_ok=True)
        
        # Configuration par défaut
        self.default_config = {
            "server": {
                "host": "0.0.0.0",
                "port": 8765,
                "use_ssl": False,
                "ssl_cert_file": "",
                "ssl_key_file": "",
                "max_clients": 50,
                "heartbeat_interval": 30,
                "client_timeout": 90
            },
            "security": {
                "encryption_enabled": True,
                "key_rotation_interval": 3600,  # 1 heure
                "max_failed_attempts": 5,
                "session_timeout": 7200  # 2 heures
            },
            "processing": {
                "batch_size": 50,
                "max_concurrent_batches": 10,
                "duplicate_threshold": 5,
                "work_directory": str(Path.home() / "DistributedUpscaler" / "server"),
                "output_directory": str(Path.home() / "DistributedUpscaler" / "output"),
                "temp_directory": str(Path.home() / "DistributedUpscaler" / "temp"),
                "compression_level": 0,
                "keep_intermediate_files": False,
                "auto_cleanup_hours": 24
            },
            "video": {
                "supported_formats": [".mp4", ".avi", ".mkv", ".mov", ".wmv", ".flv"],
                "frame_extraction_quality": "png",
                "frame_rate_preservation": True,
                "audio_preservation": True,
                "metadata_preservation": True
            },
            "realesrgan": {
                "executable_path": "./dependencies/realesrgan-ncnn-vulkan.exe",
                "models_directory": "./models",
                "default_model": "RealESRGAN_x4plus",
                "default_scale": 4,
                "tile_size": 256,
                "gpu_id": 0,
                "thread_load": "1:2:2",
                "tta_mode": False
            },
            "monitoring": {
                "enable_performance_monitoring": True,
                "log_level": "INFO",
                "max_log_files": 10,
                "metrics_retention_days": 30,
                "enable_gpu_monitoring": True
            },
            "gui": {
                "theme": "dark",
                "auto_refresh_interval": 2000,  # 2 secondes
                "show_detailed_logs": True,
                "enable_notifications": True,
                "charts_history_points": 100
            }
        }
        
        # Chargement de la configuration
        self.config = self.load_config()
    
    def load_config(self) -> Dict[str, Any]:
        """Charge la configuration depuis le fichier"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                
                # Fusion avec la configuration par défaut
                config = self.default_config.copy()
                self._merge_config(config, loaded_config)
                return config
                
            except Exception as e:
                print(f"Erreur chargement configuration: {e}")
                return self.default_config.copy()
        else:
            # Sauvegarde de la configuration par défaut
            self.save_config(self.default_config)
            return self.default_config.copy()
    
    def save_config(self, config: Optional[Dict[str, Any]] = None):
        """Sauvegarde la configuration dans le fichier"""
        config_to_save = config or self.config
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_to_save, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"Erreur sauvegarde configuration: {e}")
    
    def _merge_config(self, base: Dict[str, Any], update: Dict[str, Any]):
        """Fusionne récursivement deux dictionnaires de configuration"""
        for key, value in update.items():
            if key in base and isinstance(base[key], dict) and isinstance(value, dict):
                self._merge_config(base[key], value)
            else:
                base[key] = value
    
    def get(self, key_path: str, default: Any = None) -> Any:
        """
        Récupère une valeur de configuration avec notation pointée
        Exemple: get("server.host") -> config["server"]["host"]
        """
        keys = key_path.split('.')
        current = self.config
        
        for key in keys:
            if isinstance(current, dict) and key in current:
                current = current[key]
            else:
                return default
        
        return current
    
    def set(self, key_path: str, value: Any):
        """
        Définit une valeur de configuration avec notation pointée
        Exemple: set("server.host", "0.0.0.0")
        """
        keys = key_path.split('.')
        current = self.config
        
        for key in keys[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        
        current[keys[-1]] = value
        self.save_config()
    
    def get_work_directories(self) -> Dict[str, Path]:
        """Retourne tous les répertoires de travail"""
        directories = {
            'work': Path(self.get("processing.work_directory")),
            'output': Path(self.get("processing.output_directory")),
            'temp': Path(self.get("processing.temp_directory"))
        }
        
        # Création des répertoires s'ils n'existent pas
        for dir_path in directories.values():
            dir_path.mkdir(parents=True, exist_ok=True)
        
        return directories
    
    def validate_config(self) -> Dict[str, Any]:
        """Valide la configuration et retourne les erreurs"""
        errors = []
        warnings = []
        
        # Validation des ports
        port = self.get("server.port")
        if not isinstance(port, int) or port < 1 or port > 65535:
            errors.append("Le port serveur doit être entre 1 et 65535")
        
        # Validation des répertoires
        try:
            directories = self.get_work_directories()
            for name, path in directories.items():
                if not path.exists():
                    warnings.append(f"Le répertoire {name} sera créé: {path}")
        except Exception as e:
            errors.append(f"Erreur validation répertoires: {e}")
        
        # Validation Real-ESRGAN
        realesrgan_path = Path(self.get("realesrgan.executable_path"))
        if not realesrgan_path.exists():
            warnings.append(f"Exécutable Real-ESRGAN non trouvé: {realesrgan_path}")
        
        # Validation SSL si activé
        if self.get("server.use_ssl"):
            cert_file = self.get("server.ssl_cert_file")
            key_file = self.get("server.ssl_key_file")
            
            if not cert_file or not Path(cert_file).exists():
                errors.append("Fichier certificat SSL manquant ou invalide")
            if not key_file or not Path(key_file).exists():
                errors.append("Fichier clé SSL manquant ou invalide")
        
        return {
            'valid': len(errors) == 0,
            'errors': errors,
            'warnings': warnings
        }

# Instance globale
config = ServerConfig()

# Constantes pour la compatibilité avec l'ancien code
BATCH_SIZE = config.get("processing.batch_size", 50)
DUPLICATE_THRESHOLD = config.get("processing.duplicate_threshold", 5)
MAX_CONCURRENT_BATCHES = config.get("processing.max_concurrent_batches", 10)