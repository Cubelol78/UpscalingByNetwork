"""
Configuration du serveur d'upscaling distribué
"""

import os
from pathlib import Path
from dataclasses import dataclass
from typing import Dict, Any

@dataclass
class ServerConfig:
    """Configuration du serveur"""
    
    # Configuration réseau
    HOST: str = "0.0.0.0"
    PORT: int = 8888
    MAX_CLIENTS: int = 50
    HEARTBEAT_INTERVAL: int = 30  # secondes
    CLIENT_TIMEOUT: int = 120     # secondes
    
    # Configuration des lots
    BATCH_SIZE: int = 50          # nombre d'images par lot
    MAX_RETRIES: int = 3          # nombre de tentatives par lot
    DUPLICATE_THRESHOLD: int = 5   # seuil pour envoyer des doublons
    
    # Configuration vidéo
    TEMP_DIR: str = "temp"
    OUTPUT_DIR: str = "output"
    FRAMES_DIR: str = "frames"
    UPSCALED_DIR: str = "upscaled"
    
    # Configuration sécurité
    ENCRYPTION_KEY_SIZE: int = 32
    USE_ENCRYPTION: bool = True
    AUTH_TOKEN_LENGTH: int = 64
    
    # Configuration Real-ESRGAN
    REALESRGAN_MODEL: str = "realesr-animevideov3"
    REALESRGAN_SCALE: int = 4
    TILE_SIZE: int = 256
    GPU_ID: int = 0
    
    # Configuration FFmpeg
    FFMPEG_CRF: int = 20
    FFMPEG_PRESET: str = "medium"
    FFMPEG_THREADS: int = 12
    
    # Configuration de l'interface
    GUI_UPDATE_INTERVAL: int = 1000  # millisecondes
    LOG_MAX_LINES: int = 1000
    
    def __post_init__(self):
        """Initialisation post-construction"""
        # Création des dossiers nécessaires
        for dir_name in [self.TEMP_DIR, self.OUTPUT_DIR, 
                        self.FRAMES_DIR, self.UPSCALED_DIR]:
            Path(dir_name).mkdir(exist_ok=True)
    
    @classmethod
    def from_file(cls, config_file: str) -> 'ServerConfig':
        """Charge la configuration depuis un fichier"""
        import json
        
        if not os.path.exists(config_file):
            return cls()
        
        with open(config_file, 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        
        return cls(**config_data)
    
    def save_to_file(self, config_file: str):
        """Sauvegarde la configuration dans un fichier"""
        import json
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(self.__dict__, f, indent=4, ensure_ascii=False)

# Configuration globale
config = ServerConfig()

# Variables d'environnement
ENV_MAPPINGS = {
    'UPSCALING_HOST': 'HOST',
    'UPSCALING_PORT': 'PORT',
    'UPSCALING_MAX_CLIENTS': 'MAX_CLIENTS',
    'UPSCALING_BATCH_SIZE': 'BATCH_SIZE',
    'UPSCALING_USE_ENCRYPTION': 'USE_ENCRYPTION',
    'UPSCALING_GPU_ID': 'GPU_ID',
}

# Application des variables d'environnement
for env_var, config_attr in ENV_MAPPINGS.items():
    env_value = os.getenv(env_var)
    if env_value is not None:
        # Conversion de type automatique
        current_value = getattr(config, config_attr)
        if isinstance(current_value, bool):
            setattr(config, config_attr, env_value.lower() in ('true', '1', 'yes'))
        elif isinstance(current_value, int):
            setattr(config, config_attr, int(env_value))
        else:
            setattr(config, config_attr, env_value)

# Chemins par défaut
BASE_DIR = Path(__file__).parent.parent
ASSETS_DIR = BASE_DIR / "assets"
LOGS_DIR = BASE_DIR / "logs"
CONFIG_FILE = BASE_DIR / "server_config.json"

# Création des dossiers
LOGS_DIR.mkdir(exist_ok=True)
ASSETS_DIR.mkdir(exist_ok=True)