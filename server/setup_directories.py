# server/setup_directories.py
"""
Script de configuration pour cr√©er la structure de dossiers n√©cessaire
"""

import os
import json
from pathlib import Path

def create_directory_structure():
    """Cr√©e la structure de dossiers n√©cessaire pour le serveur"""
    
    # Dossier racine du serveur
    server_root = Path(__file__).parent
    
    # Dossiers √† cr√©er
    directories = [
        "config",
        "work",
        "input", 
        "output",
        "temp",
        "batches",
        "logs",
        "dependencies",
        "models",
        "realesrgan-ncnn-vulkan/Windows"
    ]
    
    print("üîß Configuration de la structure de dossiers...")
    
    created_dirs = []
    for directory in directories:
        dir_path = server_root / directory
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            created_dirs.append(str(dir_path))
            print(f"‚úÖ Cr√©√©: {dir_path}")
        else:
            print(f"üìÅ Existe d√©j√†: {dir_path}")
    
    # Cr√©ation du fichier de configuration par d√©faut
    config_file = server_root / "config" / "server_config.json"
    if not config_file.exists():
        default_config = {
            "server": {
                "host": "0.0.0.0",
                "port": 8765,
                "max_clients": 10,
                "heartbeat_interval": 30,
                "client_timeout": 120,
                "enable_ssl": False,
                "ssl_cert_path": "",
                "ssl_key_path": ""
            },
            "processing": {
                "batch_size": 50,
                "max_concurrent_batches": 5,
                "upscale_factor": 4,
                "realesrgan_model": "RealESRGAN_x4plus",
                "output_format": "png",
                "compression_level": 0,
                "enable_gpu": True,
                "gpu_memory_limit": 8192,
                "tile_size": 256,
                "max_retries": 3,
                "duplicate_threshold": 5
            },
            "storage": {
                "work_directory": "./work",
                "input_directory": "./input",
                "output_directory": "./output",
                "temp_directory": "./temp",
                "batches_directory": "./batches",
                "logs_directory": "./logs",
                "auto_cleanup": True,
                "min_free_space_gb": 5
            },
            "security": {
                "enable_encryption": True,
                "key_exchange_timeout": 30,
                "session_key_size": 256,
                "allowed_clients": []
            },
            "realesrgan": {
                "executable_path": "./realesrgan-ncnn-vulkan/Windows/realesrgan-ncnn-vulkan.exe",
                "models_directory": "./models",
                "default_model": "RealESRGAN_x4plus",
                "default_scale": 4,
                "tile_size": 256,
                "gpu_id": 0,
                "thread_load": "1:2:2",
                "tta_mode": False
            },
            "monitoring": {
                "enable_performance_monitoring": True,
                "log_level": "INFO",
                "max_log_files": 10,
                "metrics_retention_days": 30,
                "enable_gpu_monitoring": True
            },
            "gui": {
                "theme": "dark",
                "auto_refresh_interval": 2000,
                "show_detailed_logs": True,
                "enable_notifications": True,
                "charts_history_points": 100
            }
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        
        print(f"‚úÖ Configuration cr√©√©e: {config_file}")
    else:
        print(f"üìÑ Configuration existe: {config_file}")
    
    # Instructions pour Real-ESRGAN
    realesrgan_dir = server_root / "realesrgan-ncnn-vulkan" / "Windows"
    realesrgan_exe = realesrgan_dir / "realesrgan-ncnn-vulkan.exe"
    
    if not realesrgan_exe.exists():
        print("\n‚ö†Ô∏è  ATTENTION: Real-ESRGAN non trouv√©!")
        print(f"üì• Veuillez t√©l√©charger Real-ESRGAN et placer l'ex√©cutable dans:")
        print(f"   {realesrgan_exe}")
        print("üîó T√©l√©chargement: https://github.com/xinntao/Real-ESRGAN/releases")
        print("üì¶ Fichier requis: realesrgan-ncnn-vulkan-20220424-windows.zip")
    else:
        print(f"‚úÖ Real-ESRGAN trouv√©: {realesrgan_exe}")
    
    print(f"\nüéØ Structure de dossiers configur√©e!")
    print(f"üìÅ Dossiers cr√©√©s: {len(created_dirs)}")
    print(f"üìç Racine serveur: {server_root}")
    
    return True

def check_dependencies():
    """V√©rifie les d√©pendances Python n√©cessaires"""
    required_packages = [
        'asyncio',
        'websockets', 
        'cryptography',
        'PyQt5',
        'psutil',
        'Pillow'
    ]
    
    missing_packages = []
    
    print("\nüîç V√©rification des d√©pendances Python...")
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} - MANQUANT")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Packages manquants: {', '.join(missing_packages)}")
        print("üì¶ Installez avec: pip install " + " ".join(missing_packages))
        return False
    else:
        print("‚úÖ Toutes les d√©pendances sont install√©es!")
        return True

def main():
    """Fonction principale de configuration"""
    print("üöÄ Configuration du serveur d'upscaling distribu√©")
    print("=" * 50)
    
    # Cr√©ation de la structure de dossiers
    create_directory_structure()
    
    # V√©rification des d√©pendances
    check_dependencies()
    
    print("\n" + "=" * 50)
    print("‚úÖ Configuration termin√©e!")
    print("\nüìã Prochaines √©tapes:")
    print("1. T√©l√©charger Real-ESRGAN si n√©cessaire")
    print("2. Installer les packages Python manquants")
    print("3. Lancer le serveur avec: python main.py")

if __name__ == "__main__":
    main()